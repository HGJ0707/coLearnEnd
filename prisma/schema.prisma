// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  uid         Int      @id @default(autoincrement())
  account     String   @db.VarChar(255)
  username    String   @db.VarChar(255)
  password    String   @default("123456") @db.VarChar(255)
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  teachers Teachers[]

  @@map("users")
}

model UserMarks {
  id          Int      @id @default(autoincrement())
  uid         Int
  work_id     Int
  score       Int
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  work Works @relation(fields: [work_id], references: [id])

  @@index([work_id], name: "marks_work_id")
  @@map("user_marks")
}

model Teachers {
  id          Int      @id @default(autoincrement())
  uid         Int
  username    String   @db.VarChar(255)
  phone_num   String   @db.VarChar(255)
  password    String   @db.VarChar(255)
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  user Users @relation(fields: [uid], references: [uid])

  TeacherMarks    TeacherMarks[]
  TeacherRemarks  TeacherRemarks[]
  TeacherComments TeacherComments[]
  Courses         Courses[]
  Students        Students[]
  Classes         Classes[]

  @@map("teachers")
}

model TeacherMarks {
  id          Int      @id @default(autoincrement())
  teacher_id  Int
  work_id     Int
  mark        Int
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  teacher Teachers @relation(fields: [teacher_id], references: [id])
  work    Works    @relation(fields: [work_id], references: [id])

  @@index([teacher_id], name: "mark_teacher_id")
  @@index([work_id], name: "mark_teacher_work_id")
  @@map("teacher_marks")
}

model TeacherRemarks {
  id          Int      @id @default(autoincrement())
  uid         Int
  teacher_id  Int
  work_id     Int
  content     String   @db.Text
  create_time DateTime @default(now())
  update_time DateTime @default(now())
  state       Int      @default(1)

  // 关系定义
  teacher Teachers @relation(fields: [teacher_id], references: [id])
  work    Works    @relation(fields: [work_id], references: [id])

  @@index([teacher_id], name: "teacher_comment_id")
  @@index([work_id], name: "teacher_comment_workid")
  @@map("teacher_remarks")
}

model TeacherComments {
  id          Int      @id @default(autoincrement())
  teacher_id  Int
  work_id     Int
  content     String   @db.Text
  create_time DateTime @default(now())
  update_time DateTime @default(now())
  state       Int      @default(1)

  // 关系定义
  teacher Teachers @relation(fields: [teacher_id], references: [id])
  work    Works    @relation(fields: [work_id], references: [id])

  @@index([teacher_id], name: "teacher_comment_id")
  @@index([work_id], name: "teacher_comment_workid")
  @@map("teacher_comments")
}

model Students {
  student_id   String   @id @db.VarChar(255)
  uid          Int
  teacher_id   Int
  class_name   String   @db.VarChar(255)
  student_name String   @db.VarChar(255)
  gender       String   @default("1") @db.VarChar(255)
  password     String   @default("123456") @db.VarChar(255)
  create_time  DateTime @default(now())
  update_time  DateTime @updatedAt
  state        Int      @default(1)

  // 关系定义
  classes Classes  @relation(fields: [class_name], references: [class_name])
  teacher Teachers @relation(fields: [teacher_id], references: [id])

  StudentReplyLike   StudentReplyLike[]
  ReplyAsUser        Reply[]              @relation("ReplyUser")
  ReplyAsToUser      Reply[]              @relation("ReplyToUser")
  StudentMark        StudentMarks[]
  StudentDanmu       StudentDanmu[]
  StudentDanmuLike   StudentDanmuLike[]
  StudentCommentLike StudentCommentLike[]
  GroupsStudent      GroupsStudent[]      @relation("GroupLeader")
  GroupMembers       GroupMembers[]
  Groups             Groups[]

  @@index([teacher_id], name: "teacher_id")
  @@map("students")
}

model StudentReplyLike {
  id          Int      @id @default(autoincrement())
  student_id  String
  reply_id    Int
  like        Int
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  students Students @relation(fields: [student_id], references: [student_id])
  replies  Reply    @relation(fields: [reply_id], references: [id])

  @@index([reply_id], name: "student_reply_like_id")
  @@index([student_id], name: "student_reply_like")
  @@map("student_reply_like")
}

model StudentMarks {
  id          Int      @id @default(autoincrement())
  student_id  String
  work_id     Int
  mark        Int
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  students Students @relation(fields: [student_id], references: [student_id])
  work     Works    @relation(fields: [work_id], references: [id])

  @@index([student_id], name: "mark_student_id")
  @@index([work_id], name: "mark_work_id")
  @@map("student_marks")
}

model StudentDanmu {
  id            Int      @id @default(autoincrement())
  student_id    String
  work_id       Int
  danmu_content String   @db.Text
  danmu_time    Int      @default(0)
  create_time   DateTime @default(now())
  update_time   DateTime @updatedAt
  state         Int      @default(1)

  // 关系定义
  students Students @relation(fields: [student_id], references: [student_id])
  work     Works    @relation(fields: [work_id], references: [id])

  StudentDanmuLike StudentDanmuLike[]

  @@index([student_id], name: "mark_student_id")
  @@index([work_id], name: "mark_work_id")
  @@map("student_danmu")
}

model StudentDanmuLike {
  id          Int      @id @default(autoincrement())
  student_id  String
  danmu_id    Int
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  students Students     @relation(fields: [student_id], references: [student_id])
  danmu    StudentDanmu @relation(fields: [danmu_id], references: [id])

  @@index([student_id], name: "student_reply_like")
  @@index([danmu_id], name: "student_reply_id_like")
  @@map("student_danmu_like")
}

model StudentCommentLike {
  id          Int      @id @default(autoincrement())
  student_id  String
  comment_id  Int
  like        Int
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  students Students @relation(fields: [student_id], references: [student_id])
  comments Comments @relation(fields: [comment_id], references: [id])

  @@index([student_id], name: "like_student_id")
  @@index([comment_id], name: "like_comment_id")
  @@map("student_comment_like")
}

model Works {
  id          Int      @id @default(autoincrement())
  work_title  String   @db.VarChar(255)
  like_count  Int      @default(0)
  jon_url     String
  cover_url   String
  pageviews   Int      @default(0)
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // todo
  UserMarks       UserMarks[]
  WorkPv          WorkPv[]
  WorkLike        WorkLike[]
  TeacherMarks    TeacherMarks[]
  TeacherRemarks  TeacherRemarks[]
  TeacherComments TeacherComments[]
  GroupsStudent   GroupsStudent[]
  Comments        Comments[]
  StudentMarks    StudentMarks[]
  StudentDanmu    StudentDanmu[]
  Barrages        Barrages[]
  Groups          Groups[]

  @@index([id])
  @@map("works")
}

model WorkPv {
  id          Int      @id @default(autoincrement())
  uid         Int
  work_id     Int
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  work Works @relation(fields: [work_id], references: [id])

  @@index([work_id], name: "pv_work_id")
  @@map("work_pv")
}

model WorkLike {
  id          Int      @id @default(autoincrement())
  uid         Int
  work_id     Int
  is_like     Int
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  work Works @relation(fields: [work_id], references: [id])

  @@map("work_like")
}

model Courses {
  id          Int      @id @default(autoincrement())
  teacher_id  Int
  course_name String   @db.VarChar(255)
  course_desc String   @db.VarChar(255)
  course_img  String   @db.VarChar(255)
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  teacher      Teachers       @relation(fields: [teacher_id], references: [id])
  tasks        Tasks[]
  ChooseCourse ChooseCourse[]

  @@index([teacher_id], name: "course_teacher")
  @@map("courses")
}

model Classes {
  class_name  String   @id @db.VarChar(255)
  teacher_id  Int
  grade       String   @db.VarChar(255)
  major       String   @db.VarChar(255)
  class       String   @db.VarChar(255)
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  teacher      Teachers       @relation(fields: [teacher_id], references: [id])
  Students     Students[]
  ChooseCourse ChooseCourse[]

  @@index([teacher_id], name: "teacherid")
  @@map("classes")
}

model Comments {
  id               Int      @id @default(autoincrement())
  work_id          Int
  parent_id        Int
  comment_user_uid Int
  comment_user     String   @db.VarChar(255)
  content          String   @db.Text
  like_count       Int      @default(0)
  create_time      DateTime @default(now())
  update_time      DateTime @updatedAt
  state            Int      @default(1)

  // 关系定义
  work               Works                @relation(fields: [work_id], references: [id])
  Reply              Reply[]
  StudentCommentLike StudentCommentLike[]
  CommentLike        CommentLike[]

  @@index([work_id], name: "comments_work_id")
  @@map("comments")
}

model CommentLike {
  id          Int      @id @default(autoincrement())
  uid         Int
  comment_id  Int
  is_like     Int
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  comments Comments @relation(fields: [comment_id], references: [id])

  @@index([comment_id], name: "like_comment")
  @@map("comment_like")
}

model Reply {
  id            Int      @id @default(autoincrement())
  comment_id    Int
  reply_user    String
  reply_to_user String
  reply_content String   @db.Text
  like_count    Int      @default(0)
  create_time   DateTime @default(now())
  update_time   DateTime @updatedAt
  state         Int      @default(1)

  // 关系定义
  replyUser   Students @relation("ReplyUser", fields: [reply_user], references: [student_id])
  replyToUser Students @relation("ReplyToUser", fields: [reply_to_user], references: [student_id])
  comments    Comments @relation(fields: [comment_id], references: [id])

  StudentReplyLike StudentReplyLike[]

  @@index([comment_id], name: "reply_comment_id")
  @@index([reply_user], name: "reply_user_id")
  @@index([reply_to_user], name: "reply_to_user_id")
  @@map("reply")
}

model Groups {
  id           String   @db.VarChar(255)
  task_id      Int
  group_leader String   @db.VarChar(255)
  group_name   String   @db.VarChar(255)
  work_id      Int
  score        Int
  create_time  DateTime @default(now())
  update_time  DateTime @updatedAt
  state        Int      @default(1)

  // 关系定义
  task         Tasks          @relation(fields: [task_id], references: [task_id])
  students     Students       @relation(fields: [group_leader], references: [student_id])
  work         Works          @relation(fields: [work_id], references: [id])
  GroupMembers GroupMembers[]

  @@id([task_id, group_leader])
  @@index([task_id], name: "group_task_id")
  @@index([group_leader], name: "group_group_leader")
  @@index([work_id], name: "group_work_id")
  @@map("groups")
}

model GroupsStudent {
  id           Int
  task_id      Int
  work_id      Int
  group_leader String   @db.VarChar(255)
  group_name   String   @db.VarChar(255)
  score        Int
  create_time  DateTime @default(now())
  update_time  DateTime @updatedAt
  state        Int      @default(1)

  // 关系定义
  task        Tasks    @relation(fields: [task_id], references: [task_id])
  groupLeader Students @relation("GroupLeader", fields: [group_leader], references: [student_id])
  work        Works?   @relation(fields: [work_id], references: [id])

  // 联合主键
  @@id([task_id, group_leader])
  @@index([task_id], name: "group_task_id")
  @@index([group_leader], name: "group_leader")
  @@map("groups_student")
}

model GroupMembers {
  task_id     Int
  leader_id   String   @db.VarChar(255)
  student_id  String   @db.VarChar(255)
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  groups  Groups   @relation(fields: [task_id, leader_id], references: [task_id, group_leader])
  student Students @relation(fields: [student_id], references: [student_id])

  // 联合主键
  @@id([task_id, student_id, leader_id])
  @@index([leader_id], name: "mermbers_leader_id")
  @@index([student_id], name: "members_student_id")
  @@map("group_members")
}

model ChooseCourse {
  course_id   Int
  class_name  String   @db.VarChar(255)
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  classes Classes @relation(fields: [class_name], references: [class_name])
  courses Courses @relation(fields: [course_id], references: [id])

  // 联合主键
  @@id([class_name, course_id])
  @@index([course_id], name: "course_id")
  @@map("choose_course")
}

model Barrages {
  id          Int      @id @default(autoincrement())
  uid         Int
  work_id     Int
  content     String   @db.VarChar(255)
  danmu_time  Int      @default(0)
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  state       Int      @default(1)

  // 关系定义
  work Works? @relation(fields: [work_id], references: [id])

  @@index([work_id], name: "mark_work_id")
  @@map("barrages")
}

model Tasks {
  course_id     Int
  task_id       Int      @unique
  task_title    String   @db.VarChar(255)
  task_type     String   @db.VarChar(255)
  task_desc     String   @db.VarChar(255)
  desc_file_url String   @db.VarChar(255)
  deadline      String   @db.VarChar(255)
  create_time   DateTime @default(now())
  update_time   DateTime @updatedAt
  state         Int      @default(1)

  // 关系定义
  course        Courses         @relation(fields: [course_id], references: [id])
  GroupsStudent GroupsStudent[]
  Groups        Groups[]

  // 联合主键
  @@id([course_id, task_id])
  @@index([course_id], name: "tasks_course_id")
  @@map("tasks")
}

model ScoreWeight {
  id                  Int      @id @default(autoincrement())
  course_id           Int
  work_type           String   @default("videowork") @db.VarChar(255)
  comment_unit        Int
  comment_weight      Int
  like_unit           Int
  like_weight         Int
  belike_unit         Int
  belike_weight       Int
  teacher_mark_weight Int
  student_mark_weight Int
  danmu_unit          Int      @default(0)
  danmu_weight        Int
  create_time         DateTime @default(now())
  update_time         DateTime @updatedAt
  state               Int      @default(1)

  @@map("score_weight")
}
